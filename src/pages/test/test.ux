<template>
  <div class="demo-page" @swipe="exitHome">
    <text class="title">待办事项</text>
    <marquee class="marquee" id="marquee" scrollamount={{81}} loop={{-1}}>
      最好的投资就是投资自己|雷布斯
    </marquee>
    <list class="list" bounces="true">
    <list-item for="{{tasks}}" class="item" type="item">
      <text class="task-title">{{$item.title}}</text>
      <input class="checkbox" type="checkbox" checked="{{$item.completed}}" data-id="{{$item.id}}" />
    </list-item>
  </list>
  </div>
</template>

<script>
import router from '@system.router'
import file from '@system.file'

const TASKS_FILE_URI = '/common/File/ToDo.txt'

export default {
  private: {
    title: '待办事项',
    tasks: []
  },

  onInit() {
    this.loadTasks()
  },
  loadTasks() {
    file.readText({
      uri: TASKS_FILE_URI,
      success: (data) => {
        if (data.text) {
          this.fileContent = data.text // 设置文件内容到绑定变量
          this.tasks = this.parseTasks(data.text)
        }
      },
      fail: (data, code) => {
        console.error(`Failed to load tasks: ${code}`)
      }
    })
  },
  routeToAddTask() {
    router.push({
      uri: '/pages/addTask'
    })
  },
  deleteTask(event) {
    const taskId = event.target.attr['data-id']
    this.tasks = this.tasks.filter(task => task.id !== taskId)
    this.saveTasks()
  },
  saveTasks() {
    const tasksText = this.tasks.map(task => `${task.title},${task.completed}`).join('\n')
    file.writeText({
      uri: TASKS_FILE_URI,
      text: tasksText
    })
  },
  parseTasks(tasksText) {
    const tasks = tasksText.trim().split('\n').map((line, index) => {
      const [title, completedStr] = line.split(',')
      const completed = completedStr === 'true'
      return { id: index.toString(), title, completed }
    })
    return tasks
  },
  exitHome(event)  {
    if(event.direction == 'right'){
      this.$app.exit();      
    }
  }
}
</script>

<style>
.demo-page {
  flex-direction: column;
  align-items: center;
  padding: 16px;
}

.title {
  font-size: 48px;
  font-weight: bold;
  text-align: center;
  margin-bottom: 16px;
}

.btn-add {
  width: 200px;
  height: 40px;
  border-radius: 5px;
  background-color: #09ba07;
  font-size: 20px;
  color: #ffffff;
  text-align: center;
  margin-bottom: 20px;
}

.task-list {
  width: 100%;
}

.task-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  border-bottom: 1px solid #e0e0e0;
}

.task-title {
  font-size: 54px;
}

.btn-delete {
  width: 60px;
  height: 30px;
  border-radius: 5px;
  background-color: #e74c3c;
  font-size: 14px;
  color: #ffffff;
  text-align: center;
}

.item {
  height:137px;
  width: 100%;
  align-items: center;
  justify-content: center;
  background-color: #3d3d3d;
  border-radius: 24px;
  margin-bottom: 10px; /* 添加下边距使任务之间有间隔 */
  padding: 10px; /* 添加填充使内容与边界有间隔 */
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* 添加阴影效果 */
}


  .list {
    width: 100%;
    height: 100%;
    border: none;
  }

  .checkbox {
  width: 20px;
  height: 20px;
  margin-right: 10px;
  border-radius: 5px;
  border: 2px solid #b9bab9;
  background-color: #222222;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.checkbox:checked {
  background-color: #7c7e7c;
}

.checkbox:checked::after {
  content: '✓';
  color: #fff;
  font-size: 16px;
}

.marquee {
  margin-bottom: 36px;
}
</style>
