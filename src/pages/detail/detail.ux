<template>
  <div class="demo-page" @swipe="back">
    <div>
      <text class="detail">{{ task.title }}</text>
    </div>
    <div>
      <text>截止日期：</text>
      <text class="date">{{ task.dueDate }}</text>
    </div>
    <div>
      <text>重要程度：</text>
      <text class="priority">{{ task.priority }}</text>
    </div>
    <input type="button" class="btn-complete" @click="completeTask" value="√" />
    <input type="button" class="btn-delete" @click="deleteTask" value="X" />
  </div>
</template>

<script>
import router from "@system.router"
import file from "@system.file"

const TASKS_FILE_URI = "internal://files/res/ToDo.txt"

export default {
  protected: {
    title: "详情",
    tasks: [],
    task: {}
  },

  onInit() {
    this.loadTasks(this.taskId)
  },
  completeTask() {
    console.log("task:" + this.task.title)
    this.task.completed = true
    this.saveTasks()
    this.return()
  },
  deleteTask() {
    const taskId = this.task.id
    this.tasks = this.tasks.filter((task) => task.id !== taskId)
    this.saveTasks()
    this.return()
  },
  loadTasks(taskId) {
    file.readText({
      uri: TASKS_FILE_URI,
      success: (data) => {
        if (data.text) {
          this.tasks = this.parseTasks(data.text)
          this.task = this.tasks.find((task) => task.id === taskId)
        }
      },
      fail: (data, code) => {
        console.error(`加载tasks失败: ${code}`)
      }
    })
  },
  saveTasks() {
    console.log("开始保存")
    const tasksText = this.tasks
      .map((task) => `${task.title},${task.completed},${task.dueDate},${task.priority}`)
      .join("\n")
    file.writeText({
      uri: TASKS_FILE_URI,
      text: tasksText,
      success: () => {
        console.log("成功保存tasks")
      },
      fail: (data, code) => {
        console.error(`保存tasks失败: ${code}`)
      }
    })
  },
  parseTasks(tasksText) {
    return tasksText
      .trim()
      .split("\n")
      .map((line, index) => {
        const [title, completedStr, dueDate, priority] = line.split(",")
        const completed = completedStr.trim() === "true"
        return {
          id: index.toString(),
          title,
          completed,
          dueDate: dueDate || "未设置",
          priority: priority || "未设置"
        }
      })
  },
  back(event) {
    if (event.direction == "right" || event.direction == "left") {
      router.back()
    }
  },
  return() {
    router.push({
      uri: "/pages/home"
    })
    router.clear()
  }
}
</script>

<style>
.demo-page {
  flex-direction: column;
  align-items: center;
  padding: 16px;
}

.title {
  bottom: 0;
  font-size: 48px;
  font-weight: bold;
  text-align: center;
  margin-bottom: 16px;
}

.detail {
  font-size: 64px;
  text-align: center;
  margin-bottom: 10px;
}

.date,
.priority {
  font-size: 48px;
  text-align: center;
  margin-bottom: 10px;
}

.btn-complete,
.btn-delete {
  margin-top: 16px;
  margin-bottom: 16px;
  width: 360px;
  height: 120px;
  border-radius: 24px;
  font-size: 64px;
  text-align: center;
}

.btn-complete {
  background-color: #7d7d7d82;
  color: #ffffff;
}

.btn-delete {
  background-color: #7b7b7bc2;
  color: #000000;
}
</style>